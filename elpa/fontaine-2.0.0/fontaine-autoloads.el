;;; fontaine-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from fontaine.el

(autoload 'fontaine-set-preset "fontaine" "\
Set font configurations specified in PRESET.
PRESET is a symbol that represents the car of a list in
`fontaine-presets'.  When called interactively, prompt for
PRESET.g

Unless optional FRAME argument is supplied, apply the change to
all frames.  If FRAME satisfies `framep', then make the changes
affect only it.  If FRAME is non-nil, interpret it as the current
frame and apply the effects to it.

When called interactively with a universal prefix
argument (\\[universal-argument]), FRAME is interpreted as
non-nil.

Set `fontaine-current-preset' to PRESET.  Also see the command
`fontaine-apply-current-preset'.

Call `fontaine-set-preset-hook' as a final step.

(fn PRESET &optional FRAME)" t)
(autoload 'fontaine-apply-current-preset "fontaine" "\
Use `fontaine-set-preset' on `fontaine-current-preset'.
The value of `fontaine-current-preset' must be one of the keys in
`fontaine-presets'.

Re-applying the current preset is useful when a new theme is
loaded which overrides certain font families.  For example, if
the theme defines the `bold' face without a `:family', loading
that theme will make `bold' use the `default' family, even if the
`fontaine-presets' are configured to have different families
between the two.  In such a case, applying the current preset at
the post `load-theme' phase (e.g. via a hook) ensures that font
configurations remain consistent.

Some themes that provide hooks of this sort are the
`modus-themes', `ef-themes', `standard-themes' (all by
Protesilaos).  Alternatively, Emacs 29 provides the special
`enable-theme-functions' hook, which passes a THEME argument
which this function ignores

(fn &rest _)" t)
(autoload 'fontaine-store-latest-preset "fontaine" "\
Write latest cursor state to `fontaine-latest-state-file'.
Can be assigned to `kill-emacs-hook'.")
(autoload 'fontaine-restore-latest-preset "fontaine" "\
Restore latest preset set by `fontaine-set-preset'.
The value is stored in `fontaine-latest-state-file'.")
(defvar fontaine-mode nil "\
Non-nil if Fontaine mode is enabled.
See the `fontaine-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `fontaine-mode'.")
(custom-autoload 'fontaine-mode "fontaine" nil)
(autoload 'fontaine-mode "fontaine" "\
Persist Fontaine presets.

Arrange to store and restore the current Fontaine preset when
closing and restarting Emacs.  Also, do it for theme switching,
if the Emacs version is 29 or higher.

[ Note that in older versions of Emacs we do not have a hook that
  is called at the post-theme-load phase.  Users can do this by
  installing an advice.  Read the Info node `(fontaine)
  Theme-agnostic hook before Emacs 29'.  ]

This is a global minor mode.  If called interactively, toggle the
`Fontaine mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='fontaine-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "fontaine" '("fontaine-"))

;;; End of scraped data

(provide 'fontaine-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; fontaine-autoloads.el ends here
