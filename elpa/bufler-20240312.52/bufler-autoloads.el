;;; bufler-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from bufler.el

(autoload 'bufler-list "bufler" "\
Show Bufler's list.
With prefix argument ARG, force refreshing of buffers' VC state,
clear `bufler-cache', and regenerate buffer groups (which can be
useful after changing `bufler-groups' if the buffer list has not
yet changed).  With two universal prefix args, also show buffers
which are otherwise filtered by `bufler-filter-buffer-fns'.

(fn &optional ARG)" t)
(defalias 'bufler #'bufler-list)
(autoload 'bufler-sidebar "bufler" "\
Display Bufler list in dedicated side window.
With universal prefix, use left SIDE instead of right.  With two
universal prefixes, prompt for side and slot.

(fn &key (SIDE \\='right) (SLOT 0))" t)
(defalias 'bufler-switch-buffer #'bufler-workspace-switch-buffer)
(defalias 'bufler-mode #'bufler-workspace-mode)
(autoload 'bufler-defgroups "bufler" "\
Expand GROUPS into a group definition suitable for `bufler-groups'.
See documentation for details.

(fn &rest GROUPS)" nil t)
(function-put 'bufler-defgroups 'lisp-indent-function 'defun)
(register-definition-prefixes "bufler" '("bufler-"))


;;; Generated autoloads from bufler-group-tree.el

(register-definition-prefixes "bufler-group-tree" '("bufler-group-tree"))


;;; Generated autoloads from bufler-workspace.el

(autoload 'bufler-workspace-frame-set "bufler-workspace" "\
Call `bufler-workspace-set' with `tab-bar-mode bound to nil." t)
(autoload 'bufler-workspace-set "bufler-workspace" "\
Set workspace for the current tab or frame to the one at PATH.
Interactively, choose workspace path with completion.  If PATH is
nil (interactively, with prefix), unset the frame's workspace.
Sets tab's workspace if `tab-bar-mode' is active, otherwise the
frame's.  If TITLE, use it as the tab's/frame's name (note that
this is not the same as using a named workspace).  Return the
workspace path.

(fn &optional PATH &key TITLE)" t)
(autoload 'bufler-workspace-focus-buffer "bufler-workspace" "\
Set current tab's or frame's workspace to BUFFER's workspace.
If TITLE, pass it to `bufler-workspace-set'.  If `tab-bar-mode'
is active, set the tab's; otherwise, the frame's.  Interactively,
use current buffer.

(fn BUFFER &key TITLE)" t)
(autoload 'bufler-workspace-switch-buffer "bufler-workspace" "\
Switch to another buffer in the current group.
Without any input, switch to the previous buffer, like
`switch-to-buffer'.

If ALL-P (interactively, with universal prefix) or if the frame
has no workspace, select from all buffers.

If SWITCH-WORKSPACE-P (disable with two universal prefixes),
select from all buffers and switch to that buffer's workspace.

If NO-FILTER (with three universal prefixes), include buffers
that would otherwise be filtered by
`bufler-workspace-switch-buffer-filter-fns'.

If INCLUDE-RECENT-BUFFERS, include recently shown buffers in the
selected window at the top of the list of buffers (see option
`bufler-switch-buffer-include-recent-buffers').

If `bufler-workspace-switch-buffer-sets-workspace' is non-nil,
act as if SET-WORKSPACE-P is non-nil.  And if
`bufler-workspace-switch-buffer-and-tab' is non-nil,
automatically switch to the buffer's workspace's tab, if it has
one.

(fn &key ALL-P NO-FILTER (INCLUDE-RECENT-BUFFERS bufler-switch-buffer-include-recent-buffers) (SWITCH-WORKSPACE-P t))" t)
(autoload 'bufler-workspace-buffer-name-workspace "bufler-workspace" "\
Set current buffer's workspace to NAME.
If NAME is nil (interactively, with prefix), unset the buffer's
workspace name.  This sets the buffer-local variable
`bufler-workspace-name'.  Note that, in order for a buffer to
appear in a named workspace, the buffer must be matched by an
`auto-workspace' group before any other group.

(fn &optional NAME)" t)
(defvar bufler-workspace-mode nil "\
Non-nil if Bufler-Workspace mode is enabled.
See the `bufler-workspace-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `bufler-workspace-mode'.")
(custom-autoload 'bufler-workspace-mode "bufler-workspace" nil)
(autoload 'bufler-workspace-mode "bufler-workspace" "\
When active, set the frame title according to current Bufler group.

This is a global minor mode.  If called interactively, toggle the
`Bufler-Workspace mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='bufler-workspace-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'bufler-workspace-save "bufler-workspace" "\
Save current Bufler workspace as NAME.
Also sets current tab/frame's workspace to the current buffer's.

(fn NAME)" t)
(autoload 'bufler-workspace-open "bufler-workspace" "\
Open the workspace NAME.
NAME should be the name of a bookmark (this just calls
`bookmark-jump').  Interactively, prompt for a Bufler workspace.

(fn NAME)" t)
(autoload 'bufler-workspace-bookmark-handler "bufler-workspace" "\
Handler function for `bufler-workspace' BOOKMARK.

(fn BOOKMARK)")
(register-definition-prefixes "bufler-workspace" '("bufler-"))


;;; Generated autoloads from bufler-workspace-tabs.el

(register-definition-prefixes "bufler-workspace-tabs" '("bufler-workspace-"))

;;; End of scraped data

(provide 'bufler-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; bufler-autoloads.el ends here
